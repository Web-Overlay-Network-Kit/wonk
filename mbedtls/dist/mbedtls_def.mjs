// Delete mbedtls_config.h, then 

export const MBEDTLS_AES_ENCRYPT =     1; /**< AES encryption. */
export const MBEDTLS_AES_DECRYPT =     0; /**< AES decryption. */
export const MBEDTLS_ERR_AES_INVALID_KEY_LENGTH =                -0x0020;
export const MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH =              -0x0022;
export const MBEDTLS_ERR_AES_BAD_INPUT_DATA =                    -0x0021;

export const MBEDTLS_ARIA_ENCRYPT =     1; /**< ARIA encryption. */
export const MBEDTLS_ARIA_DECRYPT =     0; /**< ARIA decryption. */
export const MBEDTLS_ARIA_BLOCKSIZE =   16; /**< ARIA block size in bytes. */
export const MBEDTLS_ARIA_MAX_ROUNDS =  16; /**< Maximum number of rounds in ARIA. */
export const MBEDTLS_ARIA_MAX_KEYSIZE = 32; /**< Maximum size of an ARIA key in bytes. */
export const MBEDTLS_ERR_ARIA_BAD_INPUT_DATA = -0x005C;
export const MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH = -0x005E;

export const MBEDTLS_ERR_ASN1_OUT_OF_DATA =                      -0x0060;
export const MBEDTLS_ERR_ASN1_UNEXPECTED_TAG =                   -0x0062;
export const MBEDTLS_ERR_ASN1_INVALID_LENGTH =                   -0x0064;
export const MBEDTLS_ERR_ASN1_LENGTH_MISMATCH =                  -0x0066;
export const MBEDTLS_ERR_ASN1_INVALID_DATA =                     -0x0068;
export const MBEDTLS_ERR_ASN1_ALLOC_FAILED =                     -0x006A;
export const MBEDTLS_ERR_ASN1_BUF_TOO_SMALL =                    -0x006C;
export const MBEDTLS_ASN1_BOOLEAN =                 0x01;
export const MBEDTLS_ASN1_INTEGER =                 0x02;
export const MBEDTLS_ASN1_BIT_STRING =              0x03;
export const MBEDTLS_ASN1_OCTET_STRING =            0x04;
export const MBEDTLS_ASN1_NULL =                    0x05;
export const MBEDTLS_ASN1_OID =                     0x06;
export const MBEDTLS_ASN1_ENUMERATED =              0x0A;
export const MBEDTLS_ASN1_UTF8_STRING =             0x0C;
export const MBEDTLS_ASN1_SEQUENCE =                0x10;
export const MBEDTLS_ASN1_SET =                     0x11;
export const MBEDTLS_ASN1_PRINTABLE_STRING =        0x13;
export const MBEDTLS_ASN1_T61_STRING =              0x14;
export const MBEDTLS_ASN1_IA5_STRING =              0x16;
export const MBEDTLS_ASN1_UTC_TIME =                0x17;
export const MBEDTLS_ASN1_GENERALIZED_TIME =        0x18;
export const MBEDTLS_ASN1_UNIVERSAL_STRING =        0x1C;
export const MBEDTLS_ASN1_BMP_STRING =              0x1E;
export const MBEDTLS_ASN1_PRIMITIVE =               0x00;
export const MBEDTLS_ASN1_CONSTRUCTED =             0x20;
export const MBEDTLS_ASN1_CONTEXT_SPECIFIC =        0x80;

export const MBEDTLS_ASN1_TAG_CLASS_MASK =          0xC0;
export const MBEDTLS_ASN1_TAG_PC_MASK =             0x20;
export const MBEDTLS_ASN1_TAG_VALUE_MASK =          0x1F;

export const MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL =               -0x002A;
export const MBEDTLS_ERR_BASE64_INVALID_CHARACTER =              -0x002C;

export const MBEDTLS_ERR_MPI_FILE_IO_ERROR =                     -0x0002;
export const MBEDTLS_ERR_MPI_BAD_INPUT_DATA =                    -0x0004;
export const MBEDTLS_ERR_MPI_INVALID_CHARACTER =                 -0x0006;
export const MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL =                  -0x0008;
export const MBEDTLS_ERR_MPI_NEGATIVE_VALUE =                    -0x000A;
export const MBEDTLS_ERR_MPI_DIVISION_BY_ZERO =                  -0x000C;
export const MBEDTLS_ERR_MPI_NOT_ACCEPTABLE =                    -0x000E;
export const MBEDTLS_ERR_MPI_ALLOC_FAILED =                      -0x0010;

export const MBEDTLS_MPI_MAX_LIMBS =                             10000;
export const MBEDTLS_MPI_WINDOW_SIZE =                           2;        /**< Maximum window size used. */
export const MBEDTLS_MPI_MAX_SIZE =                              1024;     /**< Maximum number of bytes for usable MPIs. */
export const MBEDTLS_MPI_MAX_BITS =                              (8 * MBEDTLS_MPI_MAX_SIZE);      /**< Maximum number of bits for usable MPIs. */
export const MBEDTLS_MPI_MAX_BITS_SCALE100 =          (100 * MBEDTLS_MPI_MAX_BITS);
export const MBEDTLS_LN_2_DIV_LN_10_SCALE100 =                 332;

export const MBEDTLS_CAMELLIA_ENCRYPT =     1;
export const MBEDTLS_CAMELLIA_DECRYPT =     0;
export const MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA = -0x0024;
export const MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH = -0x0026;

export const MBEDTLS_CCM_DECRYPT =       0;
export const MBEDTLS_CCM_ENCRYPT =       1;
export const MBEDTLS_CCM_STAR_DECRYPT =  2;
export const MBEDTLS_CCM_STAR_ENCRYPT =  3;
export const MBEDTLS_ERR_CCM_BAD_INPUT =       -0x000D;
export const MBEDTLS_ERR_CCM_AUTH_FAILED =     -0x000F;

export const MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA =         -0x0051;

export const MBEDTLS_ERR_CHACHAPOLY_BAD_STATE =            -0x0054;
export const MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED =          -0x0056;

export const MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE =  -0x6080;
export const MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA =       -0x6100;
export const MBEDTLS_ERR_CIPHER_ALLOC_FAILED =         -0x6180;
export const MBEDTLS_ERR_CIPHER_INVALID_PADDING =      -0x6200;
export const MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED =  -0x6280;
export const MBEDTLS_ERR_CIPHER_AUTH_FAILED =          -0x6300;
export const MBEDTLS_ERR_CIPHER_INVALID_CONTEXT =      -0x6380;
export const MBEDTLS_CIPHER_VARIABLE_IV_LEN =     0x01;    /**< Cipher accepts IVs of variable length. */
export const MBEDTLS_CIPHER_VARIABLE_KEY_LEN =    0x02;    /**< Cipher accepts keys of variable length. */
export const MBEDTLS_MAX_IV_LENGTH =      16;
export const MBEDTLS_MAX_BLOCK_LENGTH =   16;

export const MBEDTLS_AES_BLOCK_SIZE =          16;
export const MBEDTLS_DES3_BLOCK_SIZE =         8;

export const MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED =        -0x0034;
export const MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG =              -0x0036;
export const MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG =                -0x0038;
export const MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR =                -0x003A;
export const MBEDTLS_CTR_DRBG_BLOCKSIZE =          16; /**< The block size used by the cipher. */
export const MBEDTLS_CTR_DRBG_KEYBITS =            (MBEDTLS_CTR_DRBG_KEYSIZE * 8);   /**< The key size for the DRBG operation, in bits. */
export const MBEDTLS_CTR_DRBG_SEEDLEN =            (MBEDTLS_CTR_DRBG_KEYSIZE + MBEDTLS_CTR_DRBG_BLOCKSIZE);   /**< The seed length, calculated as (counter + AES key). */
export const MBEDTLS_CTR_DRBG_RESEED_INTERVAL =    10000;
export const MBEDTLS_CTR_DRBG_MAX_INPUT =          256;
export const MBEDTLS_CTR_DRBG_MAX_REQUEST =        1024;
export const MBEDTLS_CTR_DRBG_MAX_SEED_INPUT =     384;
export const MBEDTLS_CTR_DRBG_PR_OFF =             0;
export const MBEDTLS_CTR_DRBG_PR_ON =              1;

export const MBEDTLS_DES_ENCRYPT =     1;
export const MBEDTLS_DES_DECRYPT =     0;
export const MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH =              -0x0032;
export const MBEDTLS_DES_KEY_SIZE =    8;

export const MBEDTLS_ERR_DHM_BAD_INPUT_DATA =                    -0x3080;
export const MBEDTLS_ERR_DHM_READ_PARAMS_FAILED =                -0x3100;
export const MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED =                -0x3180;
export const MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED =                -0x3200;
export const MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED =                -0x3280;
export const MBEDTLS_ERR_DHM_CALC_SECRET_FAILED =                -0x3300;
export const MBEDTLS_ERR_DHM_INVALID_FORMAT =                    -0x3380;
export const MBEDTLS_ERR_DHM_ALLOC_FAILED =                      -0x3400;
export const MBEDTLS_ERR_DHM_FILE_IO_ERROR =                     -0x3480;
export const MBEDTLS_ERR_DHM_SET_GROUP_FAILED =                  -0x3580;

export const MBEDTLS_ERR_ECP_BAD_INPUT_DATA =                    -0x4F80;
export const MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL =                  -0x4F00;
export const MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE =               -0x4E80;
export const MBEDTLS_ERR_ECP_VERIFY_FAILED =                     -0x4E00;
export const MBEDTLS_ERR_ECP_ALLOC_FAILED =                      -0x4D80;
export const MBEDTLS_ERR_ECP_RANDOM_FAILED =                     -0x4D00;
export const MBEDTLS_ERR_ECP_INVALID_KEY =                       -0x4C80;
export const MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH =                  -0x4C00;
export const MBEDTLS_ERR_ECP_IN_PROGRESS =                       -0x4B00;

export const MBEDTLS_ECP_DP_MAX =     14;
export const MBEDTLS_ECP_WINDOW_SIZE =    4;   /**< The maximum window size used. */
export const MBEDTLS_ECP_FIXED_POINT_OPTIM =  1;   /**< Enable fixed-point speed-up. */
export const MBEDTLS_ECP_MAX_BYTES =    ((MBEDTLS_ECP_MAX_BITS + 7) / 8);
export const MBEDTLS_ECP_MAX_PT_LEN =   (2 * MBEDTLS_ECP_MAX_BYTES + 1);
export const MBEDTLS_ECP_OPS_CHK =   3; /*!< basic ops count for ecp_check_pubkey()  */
export const MBEDTLS_ECP_OPS_DBL =   8; /*!< basic ops count for ecp_double_jac()    */
export const MBEDTLS_ECP_OPS_ADD =  11; /*!< basic ops count for see ecp_add_mixed() */
export const MBEDTLS_ECP_OPS_INV = 120; /*!< empirical equivalent for mpi_mod_inv()  */

export const MBEDTLS_ECP_PF_UNCOMPRESSED =    0;
export const MBEDTLS_ECP_PF_COMPRESSED =      1;
export const MBEDTLS_ECP_TLS_NAMED_CURVE =    3;   /**< The named_curve of ECCurveType. */

export const MBEDTLS_ENTROPY_MD =  MBEDTLS_MD_SHA256;
export const MBEDTLS_ENTROPY_BLOCK_SIZE =      32;      /**< Block size of entropy accumulator (SHA-256) */
export const MBEDTLS_ERR_ENTROPY_SOURCE_FAILED =                 -0x003C;
export const MBEDTLS_ERR_ENTROPY_MAX_SOURCES =                   -0x003E;
export const MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED =            -0x0040;
export const MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE =              -0x003D;
export const MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR =                 -0x003F;
export const MBEDTLS_ENTROPY_MAX_SOURCES =     20;      /**< Maximum number of sources supported */
export const MBEDTLS_ENTROPY_MAX_GATHER =      128;     /**< Maximum amount requested from entropy sources */
export const MBEDTLS_ENTROPY_MAX_SEED_SIZE =   1024;    /**< Maximum size of seed we read from seed file */
export const MBEDTLS_ENTROPY_SOURCE_MANUAL =   MBEDTLS_ENTROPY_MAX_SOURCES;
export const MBEDTLS_ENTROPY_SOURCE_STRONG =   1;       /**< Entropy source is strong   */
export const MBEDTLS_ENTROPY_SOURCE_WEAK =     0;       /**< Entropy source is weak     */

export const MBEDTLS_ERR_ERROR_GENERIC_ERROR =       -0x0001;
export const MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED = -0x006E;
export const MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED =     -0x0070;
export const MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED = -0x0072;

export const MBEDTLS_GCM_ENCRYPT =     1;
export const MBEDTLS_GCM_DECRYPT =     0;
export const MBEDTLS_ERR_GCM_AUTH_FAILED =                       -0x0012;
export const MBEDTLS_ERR_GCM_BAD_INPUT =                         -0x0014;
export const MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL =                  -0x0016;

export const MBEDTLS_ERR_HKDF_BAD_INPUT_DATA =  -0x5F80;

export const MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG =              -0x0003;
export const MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG =                -0x0005;
export const MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR =                -0x0007;
export const MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED =        -0x0009;
export const MBEDTLS_HMAC_DRBG_RESEED_INTERVAL =   10000;   /**< Interval before reseed is performed by default */
export const MBEDTLS_HMAC_DRBG_MAX_INPUT =         256;     /**< Maximum number of additional input bytes */
export const MBEDTLS_HMAC_DRBG_MAX_REQUEST =       1024;    /**< Maximum number of requested bytes per call */
export const MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT =    384;     /**< Maximum size of (re)seed buffer */
export const MBEDTLS_HMAC_DRBG_PR_OFF =   0;   /**< No prediction resistance       */
export const MBEDTLS_HMAC_DRBG_PR_ON =    1;   /**< Prediction resistance enabled  */

export const MBEDTLS_ERR_LMS_BAD_INPUT_DATA =   -0x0011; /**< Bad data has been input to an LMS function */
export const MBEDTLS_ERR_LMS_OUT_OF_PRIVATE_KEYS = -0x0013; /**< Specified LMS key has utilised all of its private keys */
export const MBEDTLS_ERR_LMS_VERIFY_FAILED =    -0x0015; /**< LMS signature verification failed */
export const MBEDTLS_ERR_LMS_ALLOC_FAILED =     -0x0017; /**< LMS failed to allocate space for a private key */
export const MBEDTLS_ERR_LMS_BUFFER_TOO_SMALL = -0x0019; /**< Input/output buffer is too small to contain requited data */
export const MBEDTLS_LMOTS_N_HASH_LEN_MAX =           (32);
export const MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT_MAX =    (34);

export const MBEDTLS_LMOTS_I_KEY_ID_LEN =             (16);
export const MBEDTLS_LMOTS_Q_LEAF_ID_LEN =            (4);
export const MBEDTLS_LMOTS_TYPE_LEN =                 (4);

export const MBEDTLS_LMS_TYPE_LEN =            (4);

export const MBEDTLS_LMS_M_NODE_BYTES_MAX = 32;

export const MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE =                -0x5080;
export const MBEDTLS_ERR_MD_BAD_INPUT_DATA =                     -0x5100;
export const MBEDTLS_ERR_MD_ALLOC_FAILED =                       -0x5180;
export const MBEDTLS_ERR_MD_FILE_IO_ERROR =                      -0x5200;

export const MBEDTLS_ERR_NET_SOCKET_FAILED =                     -0x0042;
export const MBEDTLS_ERR_NET_CONNECT_FAILED =                    -0x0044;
export const MBEDTLS_ERR_NET_BIND_FAILED =                       -0x0046;
export const MBEDTLS_ERR_NET_LISTEN_FAILED =                     -0x0048;
export const MBEDTLS_ERR_NET_ACCEPT_FAILED =                     -0x004A;
export const MBEDTLS_ERR_NET_RECV_FAILED =                       -0x004C;
export const MBEDTLS_ERR_NET_SEND_FAILED =                       -0x004E;
export const MBEDTLS_ERR_NET_CONN_RESET =                        -0x0050;
export const MBEDTLS_ERR_NET_UNKNOWN_HOST =                      -0x0052;
export const MBEDTLS_ERR_NET_BUFFER_TOO_SMALL =                  -0x0043;
export const MBEDTLS_ERR_NET_INVALID_CONTEXT =                   -0x0045;
export const MBEDTLS_ERR_NET_POLL_FAILED =                       -0x0047;
export const MBEDTLS_ERR_NET_BAD_INPUT_DATA =                    -0x0049;
export const MBEDTLS_NET_LISTEN_BACKLOG =         10; /**< The backlog that listen() should use. */
export const MBEDTLS_NET_PROTO_TCP = 0; /**< The TCP transport protocol */
export const MBEDTLS_NET_PROTO_UDP = 1; /**< The UDP transport protocol */
export const MBEDTLS_NET_POLL_READ =  1; /**< Used in \c mbedtls_net_poll to check for pending data  */
export const MBEDTLS_NET_POLL_WRITE = 2; /**< Used in \c mbedtls_net_poll to check if write possible */


export const MBEDTLS_ERR_OID_NOT_FOUND =                         -0x002E;
export const MBEDTLS_ERR_OID_BUF_TOO_SMALL =                     -0x000B;
export const MBEDTLS_OID_X509_EXT_AUTHORITY_KEY_IDENTIFIER =    (1 << 0);
export const MBEDTLS_OID_X509_EXT_SUBJECT_KEY_IDENTIFIER =      (1 << 1);
export const MBEDTLS_OID_X509_EXT_KEY_USAGE =                   (1 << 2);
export const MBEDTLS_OID_X509_EXT_CERTIFICATE_POLICIES =        (1 << 3);
export const MBEDTLS_OID_X509_EXT_POLICY_MAPPINGS =             (1 << 4);
export const MBEDTLS_OID_X509_EXT_SUBJECT_ALT_NAME =            (1 << 5);
export const MBEDTLS_OID_X509_EXT_ISSUER_ALT_NAME =             (1 << 6);
export const MBEDTLS_OID_X509_EXT_SUBJECT_DIRECTORY_ATTRS =     (1 << 7);
export const MBEDTLS_OID_X509_EXT_BASIC_CONSTRAINTS =           (1 << 8);
export const MBEDTLS_OID_X509_EXT_NAME_CONSTRAINTS =            (1 << 9);
export const MBEDTLS_OID_X509_EXT_POLICY_CONSTRAINTS =          (1 << 10);
export const MBEDTLS_OID_X509_EXT_EXTENDED_KEY_USAGE =          (1 << 11);
export const MBEDTLS_OID_X509_EXT_CRL_DISTRIBUTION_POINTS =     (1 << 12);
export const MBEDTLS_OID_X509_EXT_INIHIBIT_ANYPOLICY =          (1 << 13);
export const MBEDTLS_OID_X509_EXT_FRESHEST_CRL =                (1 << 14);
export const MBEDTLS_OID_X509_EXT_NS_CERT_TYPE =                (1 << 16);

export const MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT =          -0x1080;
export const MBEDTLS_ERR_PEM_INVALID_DATA =                      -0x1100;
export const MBEDTLS_ERR_PEM_ALLOC_FAILED =                      -0x1180;
export const MBEDTLS_ERR_PEM_INVALID_ENC_IV =                    -0x1200;
export const MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG =                   -0x1280;
export const MBEDTLS_ERR_PEM_PASSWORD_REQUIRED =                 -0x1300;
export const MBEDTLS_ERR_PEM_PASSWORD_MISMATCH =                 -0x1380;
export const MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE =               -0x1400;
export const MBEDTLS_ERR_PEM_BAD_INPUT_DATA =                    -0x1480;

export const MBEDTLS_ERR_PK_ALLOC_FAILED =        -0x3F80;
export const MBEDTLS_ERR_PK_TYPE_MISMATCH =       -0x3F00;
export const MBEDTLS_ERR_PK_BAD_INPUT_DATA =      -0x3E80;
export const MBEDTLS_ERR_PK_FILE_IO_ERROR =       -0x3E00;
export const MBEDTLS_ERR_PK_KEY_INVALID_VERSION = -0x3D80;
export const MBEDTLS_ERR_PK_KEY_INVALID_FORMAT =  -0x3D00;
export const MBEDTLS_ERR_PK_UNKNOWN_PK_ALG =      -0x3C80;
export const MBEDTLS_ERR_PK_PASSWORD_REQUIRED =   -0x3C00;
export const MBEDTLS_ERR_PK_PASSWORD_MISMATCH =   -0x3B80;
export const MBEDTLS_ERR_PK_INVALID_PUBKEY =      -0x3B00;
export const MBEDTLS_ERR_PK_INVALID_ALG =         -0x3A80;
export const MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE = -0x3A00;
export const MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE = -0x3980;
export const MBEDTLS_ERR_PK_SIG_LEN_MISMATCH =    -0x3900;
export const MBEDTLS_ERR_PK_BUFFER_TOO_SMALL =    -0x3880;

export const MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA =                 -0x1F80;
export const MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE =            -0x1F00;
export const MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT =             -0x1E80;
export const MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH =              -0x1E00;
export const MBEDTLS_PKCS12_DERIVE_KEY =       1;   /**< encryption/decryption key */
export const MBEDTLS_PKCS12_DERIVE_IV =        2;   /**< initialization vector     */
export const MBEDTLS_PKCS12_DERIVE_MAC_KEY =   3;   /**< integrity / MAC key       */
export const MBEDTLS_PKCS12_PBE_DECRYPT =      0;
export const MBEDTLS_PKCS12_PBE_ENCRYPT =      1;

export const MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA =                  -0x2f80;
export const MBEDTLS_ERR_PKCS5_INVALID_FORMAT =                  -0x2f00;
export const MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE =             -0x2e80;
export const MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH =               -0x2e00;
export const MBEDTLS_PKCS5_DECRYPT =      0;
export const MBEDTLS_PKCS5_ENCRYPT =      1;

export const MBEDTLS_ERR_PKCS7_INVALID_FORMAT =                   -0x5300;  /**< The format is invalid, e.g. different type expected. */
export const MBEDTLS_ERR_PKCS7_FEATURE_UNAVAILABLE =              -0x5380;  /**< Unavailable feature, e.g. anything other than signed data. */
export const MBEDTLS_ERR_PKCS7_INVALID_VERSION =                  -0x5400;  /**< The PKCS #7 version element is invalid or cannot be parsed. */
export const MBEDTLS_ERR_PKCS7_INVALID_CONTENT_INFO =             -0x5480;  /**< The PKCS #7 content info is invalid or cannot be parsed. */
export const MBEDTLS_ERR_PKCS7_INVALID_ALG =                      -0x5500;  /**< The algorithm tag or value is invalid or cannot be parsed. */
export const MBEDTLS_ERR_PKCS7_INVALID_CERT =                     -0x5580;  /**< The certificate tag or value is invalid or cannot be parsed. */
export const MBEDTLS_ERR_PKCS7_INVALID_SIGNATURE =                -0x5600;  /**< Error parsing the signature */
export const MBEDTLS_ERR_PKCS7_INVALID_SIGNER_INFO =              -0x5680;  /**< Error parsing the signer's info */
export const MBEDTLS_ERR_PKCS7_BAD_INPUT_DATA =                   -0x5700;  /**< Input invalid. */
export const MBEDTLS_ERR_PKCS7_ALLOC_FAILED =                     -0x5780;  /**< Allocation of memory failed. */
export const MBEDTLS_ERR_PKCS7_VERIFY_FAIL =                      -0x5800;  /**< Verification Failed */
export const MBEDTLS_ERR_PKCS7_CERT_DATE_INVALID =                -0x5880;  /**< The PKCS #7 date issued/expired dates are invalid */
export const MBEDTLS_PKCS7_SUPPORTED_VERSION =                           0x01;

export const MBEDTLS_ERR_POLY1305_BAD_INPUT_DATA =         -0x0057;

export const MBEDTLS_ERR_RSA_BAD_INPUT_DATA =                    -0x4080;
export const MBEDTLS_ERR_RSA_INVALID_PADDING =                   -0x4100;
export const MBEDTLS_ERR_RSA_KEY_GEN_FAILED =                    -0x4180;
export const MBEDTLS_ERR_RSA_KEY_CHECK_FAILED =                  -0x4200;
export const MBEDTLS_ERR_RSA_PUBLIC_FAILED =                     -0x4280;
export const MBEDTLS_ERR_RSA_PRIVATE_FAILED =                    -0x4300;
export const MBEDTLS_ERR_RSA_VERIFY_FAILED =                     -0x4380;
export const MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE =                  -0x4400;
export const MBEDTLS_ERR_RSA_RNG_FAILED =                        -0x4480;
export const MBEDTLS_RSA_PKCS_V15 =    0; /**< Use PKCS#1 v1.5 encoding. */
export const MBEDTLS_RSA_PKCS_V21 =    1; /**< Use PKCS#1 v2.1 encoding. */
export const MBEDTLS_RSA_SIGN =        1; /**< Identifier for RSA signature operations. */
export const MBEDTLS_RSA_CRYPT =       2; /**< Identifier for RSA encryption and decryption operations. */
export const MBEDTLS_RSA_SALT_LEN_ANY =    -1;

export const MBEDTLS_ERR_SHA1_BAD_INPUT_DATA =                   -0x0073;

export const MBEDTLS_ERR_SHA256_BAD_INPUT_DATA =                 -0x0074;

export const MBEDTLS_ERR_SHA512_BAD_INPUT_DATA =                 -0x0075;

export const MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS =                -0x7000;
export const MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE =               -0x7080;
export const MBEDTLS_ERR_SSL_BAD_INPUT_DATA =                    -0x7100;
export const MBEDTLS_ERR_SSL_INVALID_MAC =                       -0x7180;
export const MBEDTLS_ERR_SSL_INVALID_RECORD =                    -0x7200;
export const MBEDTLS_ERR_SSL_CONN_EOF =                          -0x7280;
export const MBEDTLS_ERR_SSL_DECODE_ERROR =                      -0x7300;
export const MBEDTLS_ERR_SSL_NO_RNG =                            -0x7400;
export const MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE =             -0x7480;
export const MBEDTLS_ERR_SSL_UNSUPPORTED_EXTENSION =             -0x7500;
export const MBEDTLS_ERR_SSL_NO_APPLICATION_PROTOCOL =           -0x7580;
export const MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED =              -0x7600;
export const MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED =                 -0x7680;
export const MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE =                -0x7700;
export const MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE =               -0x7780;
export const MBEDTLS_ERR_SSL_UNRECOGNIZED_NAME =                 -0x7800;
export const MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY =                 -0x7880;
export const MBEDTLS_ERR_SSL_BAD_CERTIFICATE =                   -0x7A00;
export const MBEDTLS_ERR_SSL_RECEIVED_NEW_SESSION_TICKET =       -0x7B00;
export const MBEDTLS_ERR_SSL_CANNOT_READ_EARLY_DATA =            -0x7B80;
export const MBEDTLS_ERR_SSL_CANNOT_WRITE_EARLY_DATA =           -0x7C00;
export const MBEDTLS_ERR_SSL_CACHE_ENTRY_NOT_FOUND =             -0x7E80;
export const MBEDTLS_ERR_SSL_ALLOC_FAILED =                      -0x7F00;
export const MBEDTLS_ERR_SSL_HW_ACCEL_FAILED =                   -0x7F80;
export const MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH =              -0x6F80;
export const MBEDTLS_ERR_SSL_BAD_PROTOCOL_VERSION =              -0x6E80;
export const MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE =                 -0x6E00;
export const MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED =            -0x6D80;
export const MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH =                  -0x6D00;
export const MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY =                  -0x6C80;
export const MBEDTLS_ERR_SSL_INTERNAL_ERROR =                    -0x6C00;
export const MBEDTLS_ERR_SSL_COUNTER_WRAPPING =                  -0x6B80;
export const MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO =       -0x6B00;
export const MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED =             -0x6A80;
export const MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL =                  -0x6A00;
export const MBEDTLS_ERR_SSL_WANT_READ =                         -0x6900;
export const MBEDTLS_ERR_SSL_WANT_WRITE =                        -0x6880;
export const MBEDTLS_ERR_SSL_TIMEOUT =                           -0x6800;
export const MBEDTLS_ERR_SSL_CLIENT_RECONNECT =                  -0x6780;
export const MBEDTLS_ERR_SSL_UNEXPECTED_RECORD =                 -0x6700;
export const MBEDTLS_ERR_SSL_NON_FATAL =                         -0x6680;
export const MBEDTLS_ERR_SSL_ILLEGAL_PARAMETER =                 -0x6600;
export const MBEDTLS_ERR_SSL_CONTINUE_PROCESSING =               -0x6580;
export const MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS =                 -0x6500;
export const MBEDTLS_ERR_SSL_EARLY_MESSAGE =                     -0x6480;
export const MBEDTLS_ERR_SSL_UNEXPECTED_CID =                    -0x6000;
export const MBEDTLS_ERR_SSL_VERSION_MISMATCH =                  -0x5F00;
export const MBEDTLS_ERR_SSL_BAD_CONFIG =                        -0x5E80;
export const MBEDTLS_SSL_TLS1_3_PSK_MODE_PURE =  0; /* Pure PSK-based exchange  */
export const MBEDTLS_SSL_TLS1_3_PSK_MODE_ECDHE = 1; /* PSK+ECDHE-based exchange */
export const MBEDTLS_SSL_IANA_TLS_GROUP_NONE =               0;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP192K1 =     0x0012;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP192R1 =     0x0013;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP224K1 =     0x0014;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP224R1 =     0x0015;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP256K1 =     0x0016;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP256R1 =     0x0017;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP384R1 =     0x0018;
export const MBEDTLS_SSL_IANA_TLS_GROUP_SECP521R1 =     0x0019;
export const MBEDTLS_SSL_IANA_TLS_GROUP_BP256R1 =       0x001A;
export const MBEDTLS_SSL_IANA_TLS_GROUP_BP384R1 =       0x001B;
export const MBEDTLS_SSL_IANA_TLS_GROUP_BP512R1 =       0x001C;
export const MBEDTLS_SSL_IANA_TLS_GROUP_X25519 =        0x001D;
export const MBEDTLS_SSL_IANA_TLS_GROUP_X448 =          0x001E;
export const MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE2048 =     0x0100;
export const MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE3072 =     0x0101;
export const MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE4096 =     0x0102;
export const MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144 =     0x0103;
export const MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192 =     0x0104;
export const MBEDTLS_SSL_MAJOR_VERSION_3 =             3;
export const MBEDTLS_SSL_MINOR_VERSION_3 =             3;   /*!< TLS v1.2 */
export const MBEDTLS_SSL_MINOR_VERSION_4 =             4;   /*!< TLS v1.3 */
export const MBEDTLS_SSL_TRANSPORT_STREAM =            0;   /*!< TLS      */
export const MBEDTLS_SSL_TRANSPORT_DATAGRAM =          1;   /*!< DTLS     */
export const MBEDTLS_SSL_MAX_HOST_NAME_LEN =           255; /*!< Maximum host name defined in RFC 1035 */
export const MBEDTLS_SSL_MAX_ALPN_NAME_LEN =           255; /*!< Maximum size in bytes of a protocol name in alpn ext., RFC 7301 */
export const MBEDTLS_SSL_MAX_ALPN_LIST_LEN =           65535; /*!< Maximum size in bytes of list in alpn ext., RFC 7301          */
export const MBEDTLS_SSL_MAX_FRAG_LEN_NONE =           0;   /*!< don't use this extension   */
export const MBEDTLS_SSL_MAX_FRAG_LEN_512 =            1;   /*!< MaxFragmentLength 2^9      */
export const MBEDTLS_SSL_MAX_FRAG_LEN_1024 =           2;   /*!< MaxFragmentLength 2^10     */
export const MBEDTLS_SSL_MAX_FRAG_LEN_2048 =           3;   /*!< MaxFragmentLength 2^11     */
export const MBEDTLS_SSL_MAX_FRAG_LEN_4096 =           4;   /*!< MaxFragmentLength 2^12     */
export const MBEDTLS_SSL_MAX_FRAG_LEN_INVALID =        5;   /*!< first invalid value        */
export const MBEDTLS_SSL_IS_CLIENT =                   0;
export const MBEDTLS_SSL_IS_SERVER =                   1;
export const MBEDTLS_SSL_EXTENDED_MS_DISABLED =        0;
export const MBEDTLS_SSL_EXTENDED_MS_ENABLED =         1;
export const MBEDTLS_SSL_CID_DISABLED =                0;
export const MBEDTLS_SSL_CID_ENABLED =                 1;
export const MBEDTLS_SSL_ETM_DISABLED =                0;
export const MBEDTLS_SSL_ETM_ENABLED =                 1;
export const MBEDTLS_SSL_COMPRESS_NULL =               0;
export const MBEDTLS_SSL_VERIFY_NONE =                 0;
export const MBEDTLS_SSL_VERIFY_OPTIONAL =             1;
export const MBEDTLS_SSL_VERIFY_REQUIRED =             2;
export const MBEDTLS_SSL_VERIFY_UNSET =                3; /* Used only for sni_authmode */
export const MBEDTLS_SSL_LEGACY_RENEGOTIATION =        0;
export const MBEDTLS_SSL_SECURE_RENEGOTIATION =        1;
export const MBEDTLS_SSL_RENEGOTIATION_DISABLED =      0;
export const MBEDTLS_SSL_RENEGOTIATION_ENABLED =       1;
export const MBEDTLS_SSL_ANTI_REPLAY_DISABLED =        0;
export const MBEDTLS_SSL_ANTI_REPLAY_ENABLED =         1;
export const MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED =  -1;
export const MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT =  16;
export const MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION =     0;
export const MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION =  1;
export const MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE =      2;
export const MBEDTLS_SSL_TRUNC_HMAC_DISABLED =         0;
export const MBEDTLS_SSL_TRUNC_HMAC_ENABLED =          1;
export const MBEDTLS_SSL_TRUNCATED_HMAC_LEN =          10;  /* 80 bits, rfc 6066 section 7 */
export const MBEDTLS_SSL_SESSION_TICKETS_DISABLED =     0;
export const MBEDTLS_SSL_SESSION_TICKETS_ENABLED =      1;
export const MBEDTLS_SSL_PRESET_DEFAULT =              0;
export const MBEDTLS_SSL_PRESET_SUITEB =               2;
export const MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED =       1;
export const MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED =      0;
export const MBEDTLS_SSL_EARLY_DATA_DISABLED =        0;
export const MBEDTLS_SSL_EARLY_DATA_ENABLED =         1;
export const MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED =    0;
export const MBEDTLS_SSL_DTLS_SRTP_MKI_SUPPORTED =      1;
export const MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_CLIENT =  1;
export const MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_SERVER =  0;
export const MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN =    1000;
export const MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX =   60000;
export const MBEDTLS_SSL_IN_CONTENT_LEN = 16384;
export const MBEDTLS_SSL_OUT_CONTENT_LEN = 16384;
export const MBEDTLS_SSL_DTLS_MAX_BUFFERING = 32768;
export const MBEDTLS_SSL_CID_IN_LEN_MAX =          32;
export const MBEDTLS_SSL_CID_OUT_LEN_MAX =         32;
export const MBEDTLS_SSL_CID_TLS1_3_PADDING_GRANULARITY = 16;
export const MBEDTLS_SSL_DTLS_CONNECTION_ID_COMPAT = 0;
export const MBEDTLS_SSL_VERIFY_DATA_MAX_LEN = 12;
export const MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO =    0xFF;   /**< renegotiation info ext */
export const MBEDTLS_SSL_HASH_NONE =                0;
export const MBEDTLS_SSL_HASH_MD5 =                 1;
export const MBEDTLS_SSL_HASH_SHA1 =                2;
export const MBEDTLS_SSL_HASH_SHA224 =              3;
export const MBEDTLS_SSL_HASH_SHA256 =              4;
export const MBEDTLS_SSL_HASH_SHA384 =              5;
export const MBEDTLS_SSL_HASH_SHA512 =              6;
export const MBEDTLS_SSL_SIG_ANON =                 0;
export const MBEDTLS_SSL_SIG_RSA =                  1;
export const MBEDTLS_SSL_SIG_ECDSA =                3;
export const MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA256 = 0x0401;
export const MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA384 = 0x0501;
export const MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA512 = 0x0601;
export const MBEDTLS_TLS1_3_SIG_ECDSA_SECP256R1_SHA256 = 0x0403;
export const MBEDTLS_TLS1_3_SIG_ECDSA_SECP384R1_SHA384 = 0x0503;
export const MBEDTLS_TLS1_3_SIG_ECDSA_SECP521R1_SHA512 = 0x0603;
export const MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA256 = 0x0804;
export const MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA384 = 0x0805;
export const MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA512 = 0x0806;
export const MBEDTLS_TLS1_3_SIG_ED25519 = 0x0807;
export const MBEDTLS_TLS1_3_SIG_ED448 = 0x0808;
export const MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA256 = 0x0809;
export const MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA384 = 0x080A;
export const MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA512 = 0x080B;
export const MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA1 = 0x0201;
export const MBEDTLS_TLS1_3_SIG_ECDSA_SHA1 =     0x0203;
export const MBEDTLS_TLS1_3_SIG_NONE = 0x0;
export const MBEDTLS_SSL_CERT_TYPE_RSA_SIGN =       1;
export const MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN =    64;
export const MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC =     20;
export const MBEDTLS_SSL_MSG_ALERT =                  21;
export const MBEDTLS_SSL_MSG_HANDSHAKE =              22;
export const MBEDTLS_SSL_MSG_APPLICATION_DATA =       23;
export const MBEDTLS_SSL_MSG_CID =                    25;
export const MBEDTLS_SSL_ALERT_LEVEL_WARNING =         1;
export const MBEDTLS_SSL_ALERT_LEVEL_FATAL =           2;
export const MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY =           0;  /* 0x00 */
export const MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE =    10;  /* 0x0A */
export const MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC =        20;  /* 0x14 */
export const MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED =     21;  /* 0x15 */
export const MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW =       22;  /* 0x16 */
export const MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE = 30;  /* 0x1E */
export const MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE =     40;  /* 0x28 */
export const MBEDTLS_SSL_ALERT_MSG_NO_CERT =               41;  /* 0x29 */
export const MBEDTLS_SSL_ALERT_MSG_BAD_CERT =              42;  /* 0x2A */
export const MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT =      43;  /* 0x2B */
export const MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED =          44;  /* 0x2C */
export const MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED =          45;  /* 0x2D */
export const MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN =          46;  /* 0x2E */
export const MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER =     47;  /* 0x2F */
export const MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA =            48;  /* 0x30 */
export const MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED =         49;  /* 0x31 */
export const MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR =          50;  /* 0x32 */
export const MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR =         51;  /* 0x33 */
export const MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION =    60;  /* 0x3C */
export const MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION =      70;  /* 0x46 */
export const MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY = 71;  /* 0x47 */
export const MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR =        80;  /* 0x50 */
export const MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK = 86;  /* 0x56 */
export const MBEDTLS_SSL_ALERT_MSG_USER_CANCELED =         90;  /* 0x5A */
export const MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION =     100;  /* 0x64 */
export const MBEDTLS_SSL_ALERT_MSG_MISSING_EXTENSION =    109;  /* 0x6d -- new in TLS 1.3 */
export const MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT =      110;  /* 0x6E */
export const MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME =    112;  /* 0x70 */
export const MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY = 115;  /* 0x73 */
export const MBEDTLS_SSL_ALERT_MSG_CERT_REQUIRED =        116;  /* 0x74 */
export const MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL = 120; /* 0x78 */
export const MBEDTLS_SSL_HS_HELLO_REQUEST =            0;
export const MBEDTLS_SSL_HS_CLIENT_HELLO =             1;
export const MBEDTLS_SSL_HS_SERVER_HELLO =             2;
export const MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST =     3;
export const MBEDTLS_SSL_HS_NEW_SESSION_TICKET =       4;
export const MBEDTLS_SSL_HS_END_OF_EARLY_DATA =        5;
export const MBEDTLS_SSL_HS_ENCRYPTED_EXTENSIONS =     8;
export const MBEDTLS_SSL_HS_CERTIFICATE =             11;
export const MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE =     12;
export const MBEDTLS_SSL_HS_CERTIFICATE_REQUEST =     13;
export const MBEDTLS_SSL_HS_SERVER_HELLO_DONE =       14;
export const MBEDTLS_SSL_HS_CERTIFICATE_VERIFY =      15;
export const MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE =     16;
export const MBEDTLS_SSL_HS_FINISHED =                20;
export const MBEDTLS_SSL_HS_MESSAGE_HASH =           254;
export const MBEDTLS_TLS_EXT_SERVERNAME =                   0;
export const MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME =          0;
export const MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH =          1;
export const MBEDTLS_TLS_EXT_TRUNCATED_HMAC =               4;
export const MBEDTLS_TLS_EXT_STATUS_REQUEST =               5; /* RFC 6066 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES =   10;
export const MBEDTLS_TLS_EXT_SUPPORTED_GROUPS =            10; /* RFC 8422,7919 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS =     11;
export const MBEDTLS_TLS_EXT_SIG_ALG =                     13; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_USE_SRTP =                    14;
export const MBEDTLS_TLS_EXT_HEARTBEAT =                   15; /* RFC 6520 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_ALPN =                        16;
export const MBEDTLS_TLS_EXT_SCT =                         18; /* RFC 6962 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_CLI_CERT_TYPE =               19; /* RFC 7250 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_SERV_CERT_TYPE =              20; /* RFC 7250 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_PADDING =                     21; /* RFC 7685 TLS 1.2 and 1.3 */
export const MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC =            22; /* 0x16 */
export const MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET =  0x0017; /* 23 */
export const MBEDTLS_TLS_EXT_RECORD_SIZE_LIMIT =           28; /* RFC 8449 (implemented for TLS 1.3 only) */
export const MBEDTLS_TLS_EXT_SESSION_TICKET =              35;
export const MBEDTLS_TLS_EXT_PRE_SHARED_KEY =              41; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_EARLY_DATA =                  42; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_SUPPORTED_VERSIONS =          43; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_COOKIE =                      44; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_PSK_KEY_EXCHANGE_MODES =      45; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_CERT_AUTH =                   47; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_OID_FILTERS =                 48; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_POST_HANDSHAKE_AUTH =         49; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_SIG_ALG_CERT =                50; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_KEY_SHARE =                   51; /* RFC 8446 TLS 1.3 */
export const MBEDTLS_TLS_EXT_ECJPAKE_KKPP =               256; /* experimental */
export const MBEDTLS_TLS_EXT_RENEGOTIATION_INFO =      0xFF01;
export const MBEDTLS_SSL_SEQUENCE_NUMBER_LEN = 8;
export const MBEDTLS_SSL_PEER_CERT_DIGEST_MAX_LEN =  48;
export const MBEDTLS_TLS_SRTP_MAX_MKI_LENGTH =             255;
export const MBEDTLS_TLS_SRTP_MAX_PROFILE_LIST_LENGTH =    4;
export const MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80 =     0x0001;
export const MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32 =     0x0002;
export const MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_80 =          0x0005;
export const MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_32 =          0x0006;
export const MBEDTLS_TLS_SRTP_UNSET =                      0x0000;
export const MBEDTLS_SSL_UNEXPECTED_CID_IGNORE = 0;
export const MBEDTLS_SSL_UNEXPECTED_CID_FAIL =   1;
export const MBEDTLS_SSL_EARLY_DATA_STATUS_NOT_SENT =  0;
export const MBEDTLS_SSL_EARLY_DATA_STATUS_ACCEPTED =  1;
export const MBEDTLS_SSL_EARLY_DATA_STATUS_REJECTED =  2;

export const MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT =       86400;   /*!< 1 day  */
export const MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES =      50;   /*!< Maximum entries in cache */

export const MBEDTLS_TLS_RSA_WITH_NULL_MD5 =                    0x01;   /**< Weak! */
export const MBEDTLS_TLS_RSA_WITH_NULL_SHA =                    0x02;   /**< Weak! */
export const MBEDTLS_TLS_PSK_WITH_NULL_SHA =                    0x2C;   /**< Weak! */
export const MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA =                0x2D;   /**< Weak! */
export const MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA =                0x2E;   /**< Weak! */
export const MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA =             0x2F;
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA =         0x33;
export const MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA =             0x35;
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA =         0x39;
export const MBEDTLS_TLS_RSA_WITH_NULL_SHA256 =                 0x3B;   /**< Weak! */
export const MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256 =          0x3C;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256 =          0x3D;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA =        0x41;
export const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA =    0x45;
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 =      0x67;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 =      0x6B;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA =        0x84;
export const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA =    0x88;
export const MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA =             0x8C;
export const MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA =             0x8D;
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA =         0x90;
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA =         0x91;
export const MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA =         0x94;
export const MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA =         0x95;
export const MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256 =          0x9C;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384 =          0x9D;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 =      0x9E;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 =      0x9F;   /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256 =          0xA8;   /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384 =          0xA9;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 =      0xAA;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 =      0xAB;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 =      0xAC;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 =      0xAD;   /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256 =          0xAE;
export const MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384 =          0xAF;
export const MBEDTLS_TLS_PSK_WITH_NULL_SHA256 =                 0xB0;   /**< Weak! */
export const MBEDTLS_TLS_PSK_WITH_NULL_SHA384 =                 0xB1;   /**< Weak! */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 =      0xB2;
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 =      0xB3;
export const MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256 =             0xB4;   /**< Weak! */
export const MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384 =             0xB5;   /**< Weak! */
export const MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 =      0xB6;
export const MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 =      0xB7;
export const MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256 =             0xB8;   /**< Weak! */
export const MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384 =             0xB9;   /**< Weak! */
export const MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 =     0xBA;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xBE;   /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 =     0xC0;   /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0xC4;   /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA =             0xC001; /**< Weak! */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA =      0xC004;
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA =      0xC005;
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA =            0xC006; /**< Weak! */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA =     0xC009;
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA =     0xC00A;
export const MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA =               0xC00B; /**< Weak! */
export const MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA =        0xC00E;
export const MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA =        0xC00F;
export const MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA =              0xC010; /**< Weak! */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA =       0xC013;
export const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA =       0xC014;
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 =  0xC023; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 =  0xC024; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 =   0xC025; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 =   0xC026; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 =    0xC027; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 =    0xC028; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 =     0xC029; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 =     0xC02A; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 =  0xC02B; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 =  0xC02C; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 =   0xC02D; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 =   0xC02E; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 =    0xC02F; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 =    0xC030; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 =     0xC031; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 =     0xC032; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA =       0xC035;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA =       0xC036;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 =    0xC037;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 =    0xC038;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA =              0xC039;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256 =           0xC03A;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384 =           0xC03B;
export const MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256 =         0xC03C; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384 =         0xC03D; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 =     0xC044; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 =     0xC045; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 = 0xC048; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 = 0xC049; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 =  0xC04A; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 =  0xC04B; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 =   0xC04C; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 =   0xC04D; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 =    0xC04E; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 =    0xC04F; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256 =         0xC050; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384 =         0xC051; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 =     0xC052; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 =     0xC053; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0xC05C; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0xC05D; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 =  0xC05E; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 =  0xC05F; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 =   0xC060; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 =   0xC061; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 =    0xC062; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 =    0xC063; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256 =         0xC064; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384 =         0xC065; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 =     0xC066; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 =     0xC067; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 =     0xC068; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 =     0xC069; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256 =         0xC06A; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384 =         0xC06B; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 =     0xC06C; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 =     0xC06D; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 =     0xC06E; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 =     0xC06F; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 =   0xC070; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 =   0xC071; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xC072;
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xC073;
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 =  0xC074;
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 =  0xC075;
export const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 =   0xC076;
export const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 =   0xC077;
export const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 =    0xC078;
export const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 =    0xC079;
export const MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 =         0xC07A; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 =         0xC07B; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 =     0xC07C; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 =     0xC07D; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC086; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC087; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 =  0xC088; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 =  0xC089; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 =   0xC08A; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 =   0xC08B; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 =    0xC08C; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 =    0xC08D; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 =       0xC08E; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 =       0xC08F; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 =   0xC090; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 =   0xC091; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 =   0xC092; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 =   0xC093; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 =       0xC094;
export const MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 =       0xC095;
export const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 =   0xC096;
export const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 =   0xC097;
export const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 =   0xC098;
export const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 =   0xC099;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xC09A;
export const MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xC09B;
export const MBEDTLS_TLS_RSA_WITH_AES_128_CCM =                0xC09C;  /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_AES_256_CCM =                0xC09D;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM =            0xC09E;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM =            0xC09F;  /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8 =              0xC0A0;  /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8 =              0xC0A1;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8 =          0xC0A2;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8 =          0xC0A3;  /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_128_CCM =                0xC0A4;  /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_256_CCM =                0xC0A5;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM =            0xC0A6;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM =            0xC0A7;  /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8 =              0xC0A8;  /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8 =              0xC0A9;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8 =          0xC0AA;  /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8 =          0xC0AB;  /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM =        0xC0AC;  /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM =        0xC0AD;  /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 =      0xC0AE;  /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 =      0xC0AF;  /**< TLS 1.2 */
export const MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8 =          0xC0FF;  /**< experimental */
export const MBEDTLS_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 =   0xCCA8; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 0xCCA9; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 =     0xCCAA; /**< TLS 1.2 */
export const MBEDTLS_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 =         0xCCAB; /**< TLS 1.2 */
export const MBEDTLS_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 =   0xCCAC; /**< TLS 1.2 */
export const MBEDTLS_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 =     0xCCAD; /**< TLS 1.2 */
export const MBEDTLS_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 =     0xCCAE; /**< TLS 1.2 */
export const MBEDTLS_TLS1_3_AES_128_GCM_SHA256 =                     0x1301; /**< TLS 1.3 */
export const MBEDTLS_TLS1_3_AES_256_GCM_SHA384 =                     0x1302; /**< TLS 1.3 */
export const MBEDTLS_TLS1_3_CHACHA20_POLY1305_SHA256 =               0x1303; /**< TLS 1.3 */
export const MBEDTLS_TLS1_3_AES_128_CCM_SHA256 =                     0x1304; /**< TLS 1.3 */
export const MBEDTLS_TLS1_3_AES_128_CCM_8_SHA256 =                   0x1305; /**< TLS 1.3 */
export const MBEDTLS_CIPHERSUITE_WEAK =       0x01;    /**< Weak ciphersuite flag  */
export const MBEDTLS_CIPHERSUITE_SHORT_TAG =  0x02;    /**< Short authentication tag, */
export const MBEDTLS_CIPHERSUITE_NODTLS =     0x04;    /**< Can't be used with DTLS */

export const MBEDTLS_SSL_COOKIE_TIMEOUT =     60; /**< Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued */

export const MBEDTLS_SSL_TICKET_MAX_KEY_BYTES = 32;          /*!< Max supported key length in bytes */
export const MBEDTLS_SSL_TICKET_KEY_NAME_BYTES = 4;          /*!< key name length in bytes */

export const MBEDTLS_ERR_THREADING_BAD_INPUT_DATA =              -0x001C;
export const MBEDTLS_ERR_THREADING_MUTEX_ERROR =                 -0x001E;

export const MBEDTLS_X509_MAX_INTERMEDIATE_CA =   8;
export const MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE =              -0x2080;
export const MBEDTLS_ERR_X509_UNKNOWN_OID =                      -0x2100;
export const MBEDTLS_ERR_X509_INVALID_FORMAT =                   -0x2180;
export const MBEDTLS_ERR_X509_INVALID_VERSION =                  -0x2200;
export const MBEDTLS_ERR_X509_INVALID_SERIAL =                   -0x2280;
export const MBEDTLS_ERR_X509_INVALID_ALG =                      -0x2300;
export const MBEDTLS_ERR_X509_INVALID_NAME =                     -0x2380;
export const MBEDTLS_ERR_X509_INVALID_DATE =                     -0x2400;
export const MBEDTLS_ERR_X509_INVALID_SIGNATURE =                -0x2480;
export const MBEDTLS_ERR_X509_INVALID_EXTENSIONS =               -0x2500;
export const MBEDTLS_ERR_X509_UNKNOWN_VERSION =                  -0x2580;
export const MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG =                  -0x2600;
export const MBEDTLS_ERR_X509_SIG_MISMATCH =                     -0x2680;
export const MBEDTLS_ERR_X509_CERT_VERIFY_FAILED =               -0x2700;
export const MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT =              -0x2780;
export const MBEDTLS_ERR_X509_BAD_INPUT_DATA =                   -0x2800;
export const MBEDTLS_ERR_X509_ALLOC_FAILED =                     -0x2880;
export const MBEDTLS_ERR_X509_FILE_IO_ERROR =                    -0x2900;
export const MBEDTLS_ERR_X509_BUFFER_TOO_SMALL =                 -0x2980;
export const MBEDTLS_ERR_X509_FATAL_ERROR =                      -0x3000;
export const MBEDTLS_X509_BADCERT_EXPIRED =             0x01;  /**< The certificate validity has expired. */
export const MBEDTLS_X509_BADCERT_REVOKED =             0x02;  /**< The certificate has been revoked (is on a CRL). */
export const MBEDTLS_X509_BADCERT_CN_MISMATCH =         0x04;  /**< The certificate Common Name (CN) does not match with the expected CN. */
export const MBEDTLS_X509_BADCERT_NOT_TRUSTED =         0x08;  /**< The certificate is not correctly signed by the trusted CA. */
export const MBEDTLS_X509_BADCRL_NOT_TRUSTED =          0x10;  /**< The CRL is not correctly signed by the trusted CA. */
export const MBEDTLS_X509_BADCRL_EXPIRED =              0x20;  /**< The CRL is expired. */
export const MBEDTLS_X509_BADCERT_MISSING =             0x40;  /**< Certificate was missing. */
export const MBEDTLS_X509_BADCERT_SKIP_VERIFY =         0x80;  /**< Certificate verification was skipped. */
export const MBEDTLS_X509_BADCERT_OTHER =             0x0100;  /**< Other reason (can be used by verify callback) */
export const MBEDTLS_X509_BADCERT_FUTURE =            0x0200;  /**< The certificate validity starts in the future. */
export const MBEDTLS_X509_BADCRL_FUTURE =             0x0400;  /**< The CRL is from the future */
export const MBEDTLS_X509_BADCERT_KEY_USAGE =         0x0800;  /**< Usage does not match the keyUsage extension. */
export const MBEDTLS_X509_BADCERT_EXT_KEY_USAGE =     0x1000;  /**< Usage does not match the extendedKeyUsage extension. */
export const MBEDTLS_X509_BADCERT_NS_CERT_TYPE =      0x2000;  /**< Usage does not match the nsCertType extension. */
export const MBEDTLS_X509_BADCERT_BAD_MD =            0x4000;  /**< The certificate is signed with an unacceptable hash. */
export const MBEDTLS_X509_BADCERT_BAD_PK =            0x8000;  /**< The certificate is signed with an unacceptable PK alg (eg RSA vs ECDSA). */
export const MBEDTLS_X509_BADCERT_BAD_KEY =         0x010000;  /**< The certificate is signed with an unacceptable key (eg bad curve, RSA too short). */
export const MBEDTLS_X509_BADCRL_BAD_MD =           0x020000;  /**< The CRL is signed with an unacceptable hash. */
export const MBEDTLS_X509_BADCRL_BAD_PK =           0x040000;  /**< The CRL is signed with an unacceptable PK alg (eg RSA vs ECDSA). */
export const MBEDTLS_X509_BADCRL_BAD_KEY =          0x080000;  /**< The CRL is signed with an unacceptable key (eg bad curve, RSA too short). */
export const MBEDTLS_X509_SAN_OTHER_NAME =                      0;
export const MBEDTLS_X509_SAN_RFC822_NAME =                     1;
export const MBEDTLS_X509_SAN_DNS_NAME =                        2;
export const MBEDTLS_X509_SAN_X400_ADDRESS_NAME =               3;
export const MBEDTLS_X509_SAN_DIRECTORY_NAME =                  4;
export const MBEDTLS_X509_SAN_EDI_PARTY_NAME =                  5;
export const MBEDTLS_X509_SAN_UNIFORM_RESOURCE_IDENTIFIER =     6;
export const MBEDTLS_X509_SAN_IP_ADDRESS =                      7;
export const MBEDTLS_X509_SAN_REGISTERED_ID =                   8;
export const MBEDTLS_X509_KU_DIGITAL_SIGNATURE =            0x80;  /* bit 0 */
export const MBEDTLS_X509_KU_NON_REPUDIATION =              0x40;  /* bit 1 */
export const MBEDTLS_X509_KU_KEY_ENCIPHERMENT =             0x20;  /* bit 2 */
export const MBEDTLS_X509_KU_DATA_ENCIPHERMENT =            0x10;  /* bit 3 */
export const MBEDTLS_X509_KU_KEY_AGREEMENT =                0x08;  /* bit 4 */
export const MBEDTLS_X509_KU_KEY_CERT_SIGN =                0x04;  /* bit 5 */
export const MBEDTLS_X509_KU_CRL_SIGN =                     0x02;  /* bit 6 */
export const MBEDTLS_X509_KU_ENCIPHER_ONLY =                0x01;  /* bit 7 */
export const MBEDTLS_X509_KU_DECIPHER_ONLY =              0x8000;  /* bit 8 */
export const MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT =         0x80;  /* bit 0 */
export const MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER =         0x40;  /* bit 1 */
export const MBEDTLS_X509_NS_CERT_TYPE_EMAIL =              0x20;  /* bit 2 */
export const MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING =     0x10;  /* bit 3 */
export const MBEDTLS_X509_NS_CERT_TYPE_RESERVED =           0x08;  /* bit 4 */
export const MBEDTLS_X509_NS_CERT_TYPE_SSL_CA =             0x04;  /* bit 5 */
export const MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA =           0x02;  /* bit 6 */
export const MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA =  0x01;  /* bit 7 */
export const MBEDTLS_X509_EXT_AUTHORITY_KEY_IDENTIFIER = MBEDTLS_OID_X509_EXT_AUTHORITY_KEY_IDENTIFIER;
export const MBEDTLS_X509_EXT_SUBJECT_KEY_IDENTIFIER =   MBEDTLS_OID_X509_EXT_SUBJECT_KEY_IDENTIFIER;
export const MBEDTLS_X509_EXT_KEY_USAGE =                MBEDTLS_OID_X509_EXT_KEY_USAGE;
export const MBEDTLS_X509_EXT_CERTIFICATE_POLICIES =     MBEDTLS_OID_X509_EXT_CERTIFICATE_POLICIES;
export const MBEDTLS_X509_EXT_POLICY_MAPPINGS =          MBEDTLS_OID_X509_EXT_POLICY_MAPPINGS;
export const MBEDTLS_X509_EXT_SUBJECT_ALT_NAME =         MBEDTLS_OID_X509_EXT_SUBJECT_ALT_NAME;         /* Supported (DNS) */
export const MBEDTLS_X509_EXT_ISSUER_ALT_NAME =          MBEDTLS_OID_X509_EXT_ISSUER_ALT_NAME;
export const MBEDTLS_X509_EXT_SUBJECT_DIRECTORY_ATTRS =  MBEDTLS_OID_X509_EXT_SUBJECT_DIRECTORY_ATTRS;
export const MBEDTLS_X509_EXT_BASIC_CONSTRAINTS =        MBEDTLS_OID_X509_EXT_BASIC_CONSTRAINTS;        /* Supported */
export const MBEDTLS_X509_EXT_NAME_CONSTRAINTS =         MBEDTLS_OID_X509_EXT_NAME_CONSTRAINTS;
export const MBEDTLS_X509_EXT_POLICY_CONSTRAINTS =       MBEDTLS_OID_X509_EXT_POLICY_CONSTRAINTS;
export const MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE =       MBEDTLS_OID_X509_EXT_EXTENDED_KEY_USAGE;
export const MBEDTLS_X509_EXT_CRL_DISTRIBUTION_POINTS =  MBEDTLS_OID_X509_EXT_CRL_DISTRIBUTION_POINTS;
export const MBEDTLS_X509_EXT_INIHIBIT_ANYPOLICY =       MBEDTLS_OID_X509_EXT_INIHIBIT_ANYPOLICY;
export const MBEDTLS_X509_EXT_FRESHEST_CRL =             MBEDTLS_OID_X509_EXT_FRESHEST_CRL;
export const MBEDTLS_X509_EXT_NS_CERT_TYPE =             MBEDTLS_OID_X509_EXT_NS_CERT_TYPE;
export const MBEDTLS_X509_FORMAT_DER =                 1;
export const MBEDTLS_X509_FORMAT_PEM =                 2;
export const MBEDTLS_X509_MAX_DN_NAME_SIZE =         256; /**< Maximum value size of a DN entry */

export const MBEDTLS_X509_CRT_VERSION_1 =              0;
export const MBEDTLS_X509_CRT_VERSION_2 =              1;
export const MBEDTLS_X509_CRT_VERSION_3 =              2;
export const MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN = 20;
export const MBEDTLS_X509_RFC5280_UTC_TIME_LEN =   15;
export const MBEDTLS_X509_MAX_FILE_PATH_LEN = 512;
export const MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE =  (MBEDTLS_X509_MAX_INTERMEDIATE_CA + 2);
